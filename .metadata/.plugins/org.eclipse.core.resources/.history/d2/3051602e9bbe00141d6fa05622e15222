

public class LInfiniteInteger implements InfiniteIntegerInterface
{
	private Node firstNode;
	private Node lastNode;
	private int numberOfDigits;
	private boolean isNegative;
	private InfiniteIntegerInterface returnInteger;
	/**
	 * Constructor: Constructs this infinite integer from a string
	 * representing an integer.
	 * @param s  a string represents an integer
	 */
	public LInfiniteInteger(){
		numberOfDigits = 0;
		firstNode = null;
	}
	public LInfiniteInteger(String s)
	{
		numberOfDigits=0;
		firstNode= null;
		LInfiniteCreator (s);



	}

	/**
	 * Constructor: Constructs this infinite integer from an integer.
	 * @param anInteger  an integer
	 */
	public LInfiniteInteger(int anInteger)
	{
		numberOfDigits=0;
		firstNode= null;
		Integer temp= (Integer) anInteger;
		String str= temp.toString();
		LInfiniteCreator(str);


		
	}
	/**
	 * Method called by "constructors" to actually initialize object
	 * 
	 * @param aString
	 */
	
	private void LInfiniteCreator (String aString){
		int digit;
		int placer=0;
		if(checkNegative(aString)==true)
			placer=1;
		 for (int i =placer; i < aString.length(); i++){
   		  digit=Character.getNumericValue(aString.charAt(i));
   		  
		     if (firstNode==null){
		    	 firstNode= new Node(null,digit,null);
		    	 lastNode= firstNode;
				 numberOfDigits++;
		     }
		     else{
				Node newNode = new Node(lastNode, digit, null);
				lastNode.next = newNode;
				lastNode = newNode;
				numberOfDigits++;

		     }
		}

		 leadingZeros();
	}
	
	/**
	 * checks to see if value entered is negative
	 */
	
	private boolean checkNegative(String aString){
		if(aString.startsWith("-")){
			isNegative=true;
			return true;
		}
		else 
			return false;
			
	}
	/***
	 * gets rid of leading zeros if there are any
	 */
	
	private void leadingZeros(){

		while(true){
			if(firstNode.next == null && firstNode.data ==0)
				break;
			else if(firstNode.data == 0){
				firstNode = firstNode.next;
				numberOfDigits--;
			}
			else{
				break;
			}
		}
		
		
	}
	/**
	 * Gets the number of digits of this infinite integer.
	 * @return an integer representing the number of digits
	 * of this infinite integer.
	 */
	public int getNumberOfDigits()
	{
		return numberOfDigits;
	}

	/**
	 * Checks whether this infinite integer is a negative number.
	 * @return true if this infinite integer is a negative number.
	 * Otherwise, return false.
	 */
	public boolean isNegative()
	{
		return isNegative;
	}
	
	private void setNegative(boolean bInput)
	{
		isNegative = bInput;
	}

	/**
	 * Calculates the result of this infinite integer plus anInfiniteInteger
	 * @param anInfiniteInteger the infinite integer to be added to this
	 * infinite integer.
	 * @return a NEW infinite integer representing the result of this
	 * infinite integer plus anInfiniteInteger
	 */
	public InfiniteIntegerInterface plus(final InfiniteIntegerInterface anInfiniteInteger)
	{		
		// TO DO
		LInfiniteInteger outsideInteger = new LInfiniteInteger(anInfiniteInteger.toString());
		LInfiniteInteger myIntegerCopy = new LInfiniteInteger(this.toString());
		if (outsideInteger.isNegative() && myIntegerCopy.isNegative()){
			
			InfiniteIntegerInterface returnInteger = this.add(outsideInteger);
			((LInfiniteInteger) returnInteger).setNegative(true);
			return returnInteger;
		}
		if (outsideInteger.isNegative()){
			InfiniteIntegerInterface returnInteger = myIntegerCopy.subtract(outsideInteger);
			return returnInteger;
		}
		
		if (myIntegerCopy.isNegative()){
			InfiniteIntegerInterface returnInteger = outsideInteger.subtract(myIntegerCopy);
			return returnInteger;
		}
		
		else{
			InfiniteIntegerInterface returnInteger = this.add((LInfiniteInteger) anInfiniteInteger);
			return returnInteger;
		}

	}
	
	private InfiniteIntegerInterface add(LInfiniteInteger I1){
		LInfiniteInteger I2 = new LInfiniteInteger(I1.toString());
		LInfiniteInteger myIntegerCopy = new LInfiniteInteger(this.toString());
		 returnInteger = new LInfiniteInteger();
		 int carry = 0;
		
		for (int i = 1; i <= myIntegerCopy.getLargestLength(I2); i++){
			//int tempSum= myIntegerCopy.getBackValue(i) + I2.getBackValue(i);
			int tempSum= myIntegerCopy.getBackValue(i) + I2.getBackValue(i) + carry;
				if(tempSum >= 10){
					//myIntegerCopy.addChangeNumber(i+1);
					tempSum -= 10;
					carry = 1;
					((LInfiniteInteger) returnInteger).appendToFront(tempSum);
				}
			
				else{
					((LInfiniteInteger) returnInteger).appendToFront(tempSum);
					carry = 0;
					}
			 //index= myIntegerCopy.getLargestLength(I2);
		}
		if(carry == 1)
			((LInfiniteInteger) returnInteger).appendToFront(1);
		returnInteger=  new LInfiniteInteger(returnInteger.toString());
		return returnInteger;
	}
	

	/**
	 * Calculates the result of this infinite integer subtracted by anInfiniteInteger
	 * @param anInfiniteInteger the infinite integer to subtract.
	 * @return a NEW infinite integer representing the result of this
	 * infinite integer subtracted by anInfiniteInteger
	 */
	public InfiniteIntegerInterface minus(final InfiniteIntegerInterface anInfiniteInteger)
	{
		if (this.isNegative()  && anInfiniteInteger.isNegative()){
			returnInteger = ((LInfiniteInteger) anInfiniteInteger).subtract((this));

		}
		else if (this.isNegative()){
			returnInteger = this.add((LInfiniteInteger) anInfiniteInteger);
			((LInfiniteInteger) returnInteger).setNegative(true);
		}
		else if(anInfiniteInteger.isNegative()){
			returnInteger = this.add((LInfiniteInteger) anInfiniteInteger);
		}
		else {
			returnInteger = this.subtract((LInfiniteInteger) anInfiniteInteger);
		}
		
		return returnInteger;
	}
	
	private InfiniteIntegerInterface subtract(LInfiniteInteger I2){
		LInfiniteInteger myIntegerCopy = new LInfiniteInteger(this.toString());
		InfiniteIntegerInterface returnInteger= new LInfiniteInteger();

		myIntegerCopy.setNegative(false);
		I2.setNegative(false);
		int compareResult =myIntegerCopy.compareTo(I2);
		if(compareResult == 0){
			((LInfiniteInteger) returnInteger).appendToFront(0);
			return returnInteger;
		}

		else if(compareResult ==1){
			int index= this.getLargestLength(I2);
		
			for (int i = 1; i <= index; i++){
				int tempSum= myIntegerCopy.getBackValue(i)-I2.getBackValue(i);
					if(tempSum < 0){
						myIntegerCopy.subChangeNumber(i+1, -1);
						tempSum += 10;
						((LInfiniteInteger) returnInteger).appendToFront(tempSum);
					}
				
					else{
						((LInfiniteInteger) returnInteger).appendToFront(tempSum);
						}
					
			}
			returnInteger=  new LInfiniteInteger(returnInteger.toString());
			return returnInteger;
			}	
		else {
			////Stack Overflow Error
			returnInteger= I2.minus(myIntegerCopy);
			((LInfiniteInteger) returnInteger).setNegative(true);
			return returnInteger;
		}
	}
	
	
	
	private void subChangeNumber (int i, int c){
	
			int middP= numberOfDigits/2;
			Node currNode= firstNode;
			int nodeIndex=1;
			if(i > middP){ 
				nodeIndex=this.getNumberOfDigits();
					while(nodeIndex != i){
						currNode= currNode.next;
						nodeIndex--;
					}
					if(currNode.data > 0)
					 currNode.data=currNode.data +c;
					else{
						currNode.previous.data = currNode.previous.data -1;
						currNode.data += 9;
					}
			}
			
			else{
				currNode = lastNode;
	
				while(i != nodeIndex){
					currNode = currNode.previous;
					nodeIndex++;
					}
				
				
					 if(currNode.data > 0)
						 currNode.data=currNode.data +c;
					 else{
							currNode.previous.data = currNode.previous.data -1;
							currNode.data += 9;
						}
			}	
	}
	private int getBackValue(int i){
		if (i > this.getNumberOfDigits())
		 return 0;
		
		int middP= numberOfDigits/2;
		Node currNode= firstNode;
		int nodeIndex=1;
		if(i < middP){ 
			nodeIndex=this.getNumberOfDigits();
				while(nodeIndex != i){
					currNode = currNode.next;
					nodeIndex--;
				}
				return currNode.data;
		}
		
		else{
			currNode = lastNode;
			if(i== 1)
				return currNode.data;
			while(i != nodeIndex){
				currNode = currNode.previous;
				nodeIndex++;
				}
			
			return currNode.data;
		}
			
		
	}
	private void appendToFront(int digit){
		 if (firstNode==null){
	    	 firstNode= new Node(null,digit,null);
	    	 lastNode= firstNode;
			 numberOfDigits++;
	     }
	     else{
			Node newNode = new Node(null, digit, firstNode);
			firstNode.previous = newNode;
			firstNode = newNode;
			numberOfDigits++;

	     }

	}
	private void appendToBack(int digit){
		if(firstNode == null){
			firstNode= new Node(null, digit, null);
			lastNode = firstNode;
			numberOfDigits++;
		}
		else {
			Node newNode = new Node (lastNode , digit, null);
			lastNode.next = newNode;
			lastNode = newNode;
			numberOfDigits++;
		}
	}
	
	private int getLargestLength( LInfiniteInteger I2){
		int i= this.getNumberOfDigits();
		int c = I2.getNumberOfDigits();
		if(i > c)
			return i;
		else 
			return c;
	}
	/**
	 * Generates a string representing this infinite integer. If this infinite integer
	 * is a negative number a minus symbol should be in the front of numbers. For example,
	 * "-12345678901234567890". But if the infinite integer is a positive number, no symbol
	 * should be in the front of the numbers (e.g., "12345678901234567890").
	 * @return a string representing this infinite integer number.
	 */
	public String toString()
	{
		StringBuilder sb= new StringBuilder ();
		if(this.isNegative)
			sb.append("-");
		
		Node currNode = firstNode;
		
		while(currNode!=null){
			Integer tempI = (Integer) currNode.data;
			sb.append(tempI.toString()) ;
			currNode = currNode.next;			
			
		}
		
		return sb.toString();
		
	}
	
	/**
	 * Compares this infinite integer with anInfiniteInteger
	 * @return either -1, 0, or 1 as follows:
	 * If this infinite integer is less than anInfiniteInteger, return -1.
	 * If this infinite integer is equal to anInfiniteInteger, return 0.
	 * If this infinite integer is greater than anInfiniteInteger, return 1.
	 */
	public int compareTo(InfiniteIntegerInterface anInfiniteInteger)
	{	

		int variableNumberOfDigits = anInfiniteInteger.getNumberOfDigits();
		
		if(variableNumberOfDigits > this.getNumberOfDigits())
			return -1;
		else if( this.getNumberOfDigits() > variableNumberOfDigits)
			return 1;
		
		if(this.isNegative() && !anInfiniteInteger.isNegative())
			return -1;
		
		if(anInfiniteInteger.isNegative() && !this.isNegative())
			return 1;
		
		for(int i=1; i <= this.getNumberOfDigits(); i++){
			if(this.getValue(i) >  ((LInfiniteInteger) anInfiniteInteger).getValue(i))
				return 1;
			
			if(((LInfiniteInteger) anInfiniteInteger).getValue(i) > this.getValue(i))
				return -1;
			
		}
		return 0;
	}

	/**
	 * Function that returns the rear most value in the class. 
	 * for example 369. if i= 0. return 9. i=1 returns 6 ....
	 * @param i
	 * @param middP
	 * @return
	 */
	
	
	/**
	 * function to return the data of the first node or most significant
	 * can be used with a for loop for easy retrieval of entire linked list
	 * @param i
	 * @return value
	 */
	public int getValue(int i){
		int middP= numberOfDigits/2;
		Node currNode= firstNode;
		int nodeIndex=1;
		if(i < middP){ 
			if(i== 1)
				return currNode.data;
			else {
				while(nodeIndex != i){
					currNode= currNode.next;
					if(currNode==null)
						return 0;
					nodeIndex++;
				}
				return currNode.data;
			}
		}
		
		else{
			currNode = lastNode;
			nodeIndex=numberOfDigits;
			while(i != nodeIndex){
				currNode = currNode.previous;
				if(currNode==null)
					return 0;
				nodeIndex--;
			}

			
			return currNode.data;
		}
			
		
	}
	/**
	 * Calculates the result of this infinite integer multiplied by anInfiniteInteger
	 * @param anInfiniteInteger the multiplier.
	 * @return a NEW infinite integer representing the result of this
	 * infinite integer multiplied by anInfiniteInteger.
	 */
	public InfiniteIntegerInterface multiply(final InfiniteIntegerInterface anInfiniteInteger)
	{
		// TO DO
		if(this.isNegative() && anInfiniteInteger.isNegative()){
			if(this.compareTo(anInfiniteInteger) == -1 )
				returnInteger= ((LInfiniteInteger) anInfiniteInteger).mult(this);
			else{
				returnInteger= this.mult((LInfiniteInteger) anInfiniteInteger);
			}

		}
		else if (this.isNegative() || anInfiniteInteger.isNegative()){
			returnInteger= this.mult((LInfiniteInteger) anInfiniteInteger);
			LInfiniteInteger gdi = new LInfiniteInteger(0);
			if(returnInteger.compareTo(gdi) != 0)
				((LInfiniteInteger) returnInteger).setNegative(true);
		}
		
		else {
			returnInteger= this.mult((LInfiniteInteger) anInfiniteInteger);
			//System.out.println("returnINteger" +returnInteger.toString());
		}
		return returnInteger; 
	}
	
	private InfiniteIntegerInterface mult(LInfiniteInteger I1){
		LInfiniteInteger I2 = new LInfiniteInteger(I1.toString());
		LInfiniteInteger myIntegerCopy = new LInfiniteInteger(this.toString());
		LInfiniteInteger A1 = new LInfiniteInteger();
		LInfiniteInteger returnInteger = new LInfiniteInteger(0);
		 int carry = 0;
		 int count = 0;
		 for(int i = 1; i<=myIntegerCopy.getLargestLength(I2); i++){
		
			 for (int o = 1; o <= myIntegerCopy.getNumberOfDigits(); o++){
				 int tempSum= (myIntegerCopy.getBackValue(o)) * I2.getBackValue(i);
				
				  if(tempSum >= 10 ){

					int Sum = tempSum % 10;
					carry = tempSum / 10;
					((LInfiniteInteger) A1).appendToFront(Sum);
				 }
			
				  else{
					  ((LInfiniteInteger) A1).appendToFront(tempSum);
					  carry = 0;
				  	}
				  }
		 }
	}
	private class Node
	{
		private int data; 
		private Node next;
		private Node previous;
		
		private Node(Node previousNode, int aData, Node nextNode)
		{
			previous = previousNode;
			data = aData;
			next = nextNode;
		}
		
		private Node(int aData)
		{
			this(null, aData, null);
		}
	}
}
